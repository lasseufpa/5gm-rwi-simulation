#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.1.0'
__CHEETAH_versionTuple__ = (3, 1, 0, 'final', 1)
__CHEETAH_genTime__ = 1542396183.5197952
__CHEETAH_genTimestamp__ = 'Fri Nov 16 16:23:03 2018'
__CHEETAH_src__ = 'vehicles_template.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Nov 16 16:21:52 2018'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class vehicles_template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(vehicles_template, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''Format type:keyword version: 1.1.0
begin_<object> Vehicles and Pedestrians
begin_<reference>
cartesian
longitude ''')
        _v = VFFSL(SL,"long",True) # '$long' on line 5, col 11
        if _v is not None: write(_filter(_v, rawExpr='$long')) # from line 5, col 11.
        write('''
latitude ''')
        _v = VFFSL(SL,"lat",True) # '$lat' on line 6, col 10
        if _v is not None: write(_filter(_v, rawExpr='$lat')) # from line 6, col 10.
        write('''
visible no
terrain
end_<reference>
begin_<Material> Human Dry skin 60 Ghz
Material 0
LayeredDielectric
begin_<Color> 
ambient 1.000000 1.000000 0.501961 1.000000
diffuse 1.000000 1.000000 0.501961 1.000000
specular 1.000000 1.000000 0.501961 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.400000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
nLayers 1
begin_<DielectricLayer> 
conductivity 3.640e+001
permittivity 7.975300
roughness 0.000e+000
thickness 0.000e+000
end_<DielectricLayer>
end_<Material>
begin_<Material> ITU Glass 60 GHz
Material 1
LayeredDielectric
begin_<Color> 
ambient 0.039216 0.662745 0.960784 1.000000
diffuse 0.039216 0.662745 0.960784 1.000000
specular 0.039216 0.662745 0.960784 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.000000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
nLayers 1
begin_<DielectricLayer> 
conductivity 5.674e-001
permittivity 6.270000
roughness 0.000e+000
thickness 3.000e-003
end_<DielectricLayer>
end_<Material>
begin_<Material> Metal Car
Material 2
PEC
thickness 0.000e+000
begin_<Color> 
ambient 0.576471 0.000000 0.000000 1.000000
diffuse 0.576471 0.000000 0.000000 1.000000
specular 0.576471 0.000000 0.000000 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.400000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
roughness 0.000e+000
end_<Material>
begin_<Material> Metal Bus
Material 3
PEC
thickness 0.000e+000
begin_<Color> 
ambient 1.000000 1.000000 0.000000 1.000000
diffuse 1.000000 1.000000 0.000000 1.000000
specular 1.000000 1.000000 0.000000 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.400000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
roughness 0.000e+000
end_<Material>
begin_<Material> Metal Truck
Material 4
PEC
thickness 0.000e+000
begin_<Color> 
ambient 0.000000 1.000000 0.000000 1.000000
diffuse 0.000000 1.000000 0.000000 1.000000
specular 0.000000 1.000000 0.000000 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.400000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
roughness 0.000e+000
end_<Material>
begin_<Material> Metal Drone
Material 5
PEC
thickness 0.000e+000
begin_<Color> 
ambient 0.000000 0.576471 0.000000 1.000000
diffuse 0.000000 0.576471 0.000000 1.000000
specular 0.000000 0.576471 0.000000 1.000000
emission 0.000000 0.000000 0.000000 0.000000
shininess 50.000000
end_<Color>
diffuse_scattering_model none
fields_diffusively_scattered 0.400000
cross_polarized_power 0.400000
directive_alpha 4
directive_beta 4
directive_lambda 0.750000
subdivide_facets yes
reflection_coefficient_options do_not_use
roughness 0.000e+000
end_<Material>
''')
        _v = VFFSL(SL,"a",True) # '$a' on line 31, col 1
        if _v is not None: write(_filter(_v, rawExpr='$a')) # from line 31, col 1.
        write('''
begin_<ControlVectors>
CVsVisible no
Stippled yes
CVsThickness 3
CVxLength 10.0000000000
CVyLength 10.0000000000
CVzLength 10.0000000000
CVsXaxis 1.0000000000 0.0000000000 0.0000000000
CVsZaxis 0.0000000000 0.0000000000 1.0000000000
end_<ControlVectors>
end_<object>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_vehicles_template = 'respond'

## END CLASS DEFINITION

if not hasattr(vehicles_template, '_initCheetahAttributes'):
    templateAPIClass = getattr(vehicles_template,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(vehicles_template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=vehicles_template()).run()


